{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["CCHDO_CRUISE_INFO","handleFormSubmit","event","preventDefault","target","nativeEvent","data","FormData","console","log","Array","from","entries","Files","useState","files","setFiles","Form","Group","className","controlId","Label","Control","onChange","map","v","name","type","multiple","Text","rel","href","length","flexsearchOptions","preset","tokenize","document","id","index","CruiseSelector","loaded","setLoaded","cruises","setCrusies","searchResults","setSearchResults","open","setOpen","Document","setIndex","searchQuery","setSearchQuery","doSearch","query","idx","tokens","split","filter","e","trim","intersection","token","queryIds","search","tokenMatch","result","union","useEffect","a","fetch","response","json","sort","b","startDate","newIndex","forEach","element","add","error","loadCruiseInfo","buttonText","notYet","loadError","columns","dataField","isDummyField","text","formatter","_","row","rowIndex","Button","onClick","cell","str","chiSci","obj","role","variant","disabled","value","_cruises","ids","cruise","includes","keyField","pagination","paginationFactory","noDataIndication","DataTypeSelector","Check","label","App","onSubmit","placeholder","as","rows","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7acad5f0.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"react-bootstrap-table2-paginator/dist/react-bootstrap-table2-paginator.min.css\";\n\nimport { Form, Button, Table } from \"react-bootstrap\";\nimport { Document, Id, IndexOptionsForDocumentSearch } from \"flexsearch\";\nimport { intersection, union } from \"lodash\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\n\ninterface Participant {\n  name: string;\n  email: string;\n  role: string;\n  institution: string;\n}\n\ninterface Collections {\n  groups: string[];\n  oceans: string[];\n  programs: string[];\n  woce_lines: string[];\n}\n\ninterface Cruise {\n  id: number;\n  expocode: string;\n  startDate: string;\n  endDate: string;\n  ship: string;\n  country: string;\n  collections: Collections;\n  participants: Participant[];\n}\n\nconst CCHDO_CRUISE_INFO = \"https://cchdo.ucsd.edu/api/v1/cruise/all\";\n\nconst handleFormSubmit = (event: React.SyntheticEvent) => {\n  event.preventDefault();\n  const target = event.nativeEvent.target as HTMLFormElement;\n  const data = new FormData(target);\n  console.log(Array.from(data.entries()));\n};\n\nconst Files = () => {\n  const [files, setFiles] = useState<string[]>([]);\n  const handleFileSelect = (event: React.SyntheticEvent) => {\n    const target = event.target as HTMLInputElement;\n    if (target.files === null) {\n      return;\n    }\n    setFiles(Array.from(target.files).map((v) => v.name));\n  };\n  return (\n    <Form.Group className=\"mb-3\" controlId=\"submitter_email\">\n      <Form.Label>Select FIles</Form.Label>\n      <Form.Control\n        onChange={handleFileSelect}\n        name=\"file\"\n        type=\"file\"\n        multiple\n      />\n      <Form.Text>\n        You can select multiple files using your system dialog box. (see how:{\" \"}\n        <a\n          rel=\"noopener noreferrer\"\n          target=\"_blank\"\n          href=\"https://support.apple.com/en-lamr/guide/mac-help/mchlp1378/mac\"\n        >\n          mac\n        </a>\n        ,{\" \"}\n        <a\n          rel=\"noopener noreferrer\"\n          target=\"_blank\"\n          href=\"https://nerdschalk.com/how-to-select-multiple-files-on-windows-10-in-2021-7-ways/\"\n        >\n          windows\n        </a>\n        )\n      </Form.Text>\n      {files.length > 1 && (\n        <ul>\n          {files.map((v) => (\n            <li key={v}>{v}</li>\n          ))}\n        </ul>\n      )}\n    </Form.Group>\n  );\n};\n\ntype CruiseSelectorStates = \"notYet\" | \"loadError\" | \"loaded\";\n\nconst CruiseLines = ({ cruise }: { cruise: Cruise }) => {\n  const line = cruise.collections.woce_lines;\n  if (line.length === 0) {\n    return <span></span>;\n  }\n  return (\n    <ul>\n      {line.map((line) => (\n        <li key={`${cruise.expocode}_${line}`}>{line}</li>\n      ))}\n    </ul>\n  );\n};\n\nconst PIList = ({ cruise }: { cruise: Cruise }) => {\n  const roles = new Set([\"Chief Scientist\", \"Co-Chief Scientist\"]);\n  let participants = cruise.participants;\n  participants = participants.filter((participant) =>\n    roles.has(participant.role)\n  );\n  if (participants.length === 0) {\n    return <span></span>;\n  }\n  return (\n    <ul>\n      {participants.map((participant) => (\n        <li key={`${cruise.expocode}_${participant.name}`}>\n          {participant.name}\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nconst flexsearchOptions: IndexOptionsForDocumentSearch<Cruise> = {\n  preset: \"match\",\n  tokenize: \"full\",\n  document: {\n    id: \"id\",\n    index: [\n      \"expocode\",\n      \"participants[]:name\",\n      \"collections:woce_lines\",\n      \"collections:groups\",\n      \"collections:programs\",\n      \"collections:oceans\",\n      \"ship\",\n      \"startDate\",\n      \"endDate\",\n      \"start_port\",\n      \"end_port\",\n      \"references[]:value\",\n    ],\n  },\n};\n\nconst CruiseSelector = () => {\n  const [loaded, setLoaded] = useState<CruiseSelectorStates>(\"notYet\");\n  const [cruises, setCrusies] = useState<Cruise[]>([]);\n  const [searchResults, setSearchResults] = useState<Cruise[]>([]);\n  const [open, setOpen] = useState<boolean>(false);\n  const [index, setIndex] = useState(new Document(flexsearchOptions));\n  const [searchQuery, setSearchQuery] = useState(\"\")\n\n  const doSearch = (query: string, idx: Document<Cruise>): Id[] => {\n    const tokens = query.split(/(\\s+)/).filter((e) => e.trim().length > 0);\n    if (tokens.length > 1) {\n      return intersection(...tokens.map((token) => doSearch(token, idx)));\n    }\n    const queryResults = idx.search(query);\n    const queryIds = queryResults.map((tokenMatch) => tokenMatch.result);\n    return union(...queryIds);\n  };\n\n  const setSearchFilteredCruises = (_cruises: Cruise[], ids: Id[]): void => {\n    setSearchResults(_cruises.filter((cruise) => ids.includes(cruise.id)));\n  };\n\n  useEffect(() => {\n    async function loadCruiseInfo() {\n      try {\n        let response = await fetch(CCHDO_CRUISE_INFO);\n        let data: Cruise[] = await response.json();\n        data = data.sort((a, b) => a.startDate > b.startDate ? a.startDate === b.startDate ? 0 : -1 : -0)\n        setCrusies(data);\n\n        const newIndex = new Document(flexsearchOptions);\n        data.forEach((element) => {\n          newIndex.add(element);\n        });\n        setIndex(newIndex);\n\n        setLoaded(\"loaded\");\n      } catch (err) {\n        console.error(err);\n        setLoaded(\"loadError\");\n      }\n    }\n    loadCruiseInfo();\n  }, []);\n  const buttonText = {\n    notYet: \"Loading cruises...\",\n    loadError: \"Could not load cruise list\",\n    loaded: `Select Cruise: (${cruises.length} cruises)`,\n  };\n\n  const listFormatter = (cell: string[], row: any) => {\n    if (cell.length === 0) {\n      return <span>-</span>;\n    }\n    return (\n      <ul>\n        {cell.map((str) => (\n          <li key={str}>{str}</li>\n        ))}\n      </ul>\n    );\n  };\n  const chiSciFormatter = (cell: Participant[], row: any) => {\n    const chiSci = cell.filter((obj) => obj.role === \"Chief Scientist\");\n    if (chiSci.length === 0) {\n      return <span>-</span>;\n    }\n    return (\n      <ul>\n        {chiSci.map((str) => (\n          <li key={str.name}>{str.name}</li>\n        ))}\n      </ul>\n    );\n  };\n\n  const columns = [\n    {\n      dataField: \"df1\",\n      isDummyField: true,\n      text: \"Select\",\n      formatter: (_:any, row:Cruise, rowIndex:number) => {\n        return <Button onClick={() => console.log(row.id)}>Select</Button>\n      }\n    },\n    {\n      dataField: \"expocode\",\n      text: \"Expocode\",\n    },\n    {\n      dataField: \"collections.woce_lines\",\n      text: \"Line\",\n      formatter: listFormatter,\n    },\n    {\n      dataField: \"ship\",\n      text: \"Ship\",\n    },\n    {\n      dataField: \"country\",\n      text: \"Country\",\n    },\n    {\n      dataField: \"startDate\",\n      text: \"Start Date\",\n    },\n    {\n      dataField: \"endDate\",\n      text: \"End Date\",\n    },\n    {\n      dataField: \"participants\",\n      text: \"Chi Sci\",\n      formatter: chiSciFormatter,\n    },\n  ];\n\n  return (\n    <div>\n      <Button\n        onClick={() => setOpen(!open)}\n        variant=\"outline-secondary\"\n        disabled={loaded !== \"loaded\"}\n      >\n        {buttonText[loaded]}\n      </Button>\n\n      {open === true && (\n        <div>\n          <input\n            type=\"search\"\n            value={searchQuery}\n            onChange={(event) =>{\n              setSearchQuery(event.target.value)\n              setSearchFilteredCruises(\n                cruises,\n                doSearch(event.target.value, index)\n              )\n            }\n            }\n          />\n          <BootstrapTable\n            keyField=\"expocode\"\n            data={searchQuery.trim() === \"\"? cruises: searchResults}\n            columns={columns}\n            pagination={paginationFactory({})}\n            noDataIndication=\"No Cruises Found\"\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst DataTypeSelector = () => {\n  return (\n    <div>\n      <Form.Group className=\"mb-3\" controlId=\"submission_notes_private\">\n        <Form.Check\n          id=\"submission_data_type_btl\"\n          name=\"submission_data_type\"\n          value=\"bottle\"\n          type=\"checkbox\"\n          label=\"bottle data\"\n        />\n        <Form.Check\n          id=\"submission_data_type_ctd\"\n          name=\"submission_data_type\"\n          value=\"ctd\"\n          type=\"checkbox\"\n          label=\"CTD data\"\n        />\n        <Form.Check\n          id=\"submission_data_type_raw\"\n          name=\"submission_data_type\"\n          value=\"raw\"\n          type=\"checkbox\"\n          label=\"raw ctd data\"\n        />\n        <Form.Check\n          id=\"submission_data_type_other\"\n          name=\"submission_data_type\"\n          value=\"other\"\n          type=\"checkbox\"\n          label=\"other\"\n        />\n        <Form.Text>select all that apply</Form.Text>\n      </Form.Group>\n    </div>\n  );\n};\n\nfunction App() {\n  return (\n    <div>\n      <h1>CCHDO Submit Page</h1>\n      <h2>Required Information</h2>\n      <Form onSubmit={handleFormSubmit}>\n        <Form.Group className=\"mb-3\" controlId=\"submitter_name\">\n          <Form.Label>Your Name</Form.Label>\n          <Form.Control\n            name=\"submitter_name\"\n            type=\"text\"\n            placeholder=\"Your Name\"\n          />\n        </Form.Group>\n\n        <Form.Group className=\"mb-3\" controlId=\"submitter_email\">\n          <Form.Label>Your Email</Form.Label>\n          <Form.Control\n            name=\"submitter_email\"\n            type=\"email\"\n            placeholder=\"example@example.edu\"\n          />\n        </Form.Group>\n\n        <h2>Files to Upload</h2>\n        <Files />\n\n        <h2>Optional Questions about uploaded data</h2>\n\n        <h3>Associate with a cruise?</h3>\n        <CruiseSelector />\n\n        <h3>Associate with data type?</h3>\n        <DataTypeSelector />\n\n        <h3>Any Notes?</h3>\n        <Form.Group className=\"mb-3\" controlId=\"submission_notes\">\n          <Form.Label>Public Submission Notes</Form.Label>\n          <Form.Control as=\"textarea\" rows={3} />\n          <Form.Text>\n            {\" \"}\n            Anything else users of the data should know? These notes will appear\n            on cruise pages.\n          </Form.Text>\n        </Form.Group>\n\n        <Form.Group className=\"mb-3\" controlId=\"submission_notes_private\">\n          <Form.Label>Private Submission Notes</Form.Label>\n          <Form.Control as=\"textarea\" rows={3} />\n          <Form.Text>\n            Anything else you would like CCHDO staff to know? If data are not\n            intended for public access, please note why here\n          </Form.Text>\n        </Form.Group>\n\n        <hr />\n\n        <Button variant=\"primary\" type=\"submit\">\n          Submit\n        </Button>\n      </Form>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}