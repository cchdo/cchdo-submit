{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["CCHDO_CRUISE_INFO","handleFormSubmit","event","preventDefault","target","nativeEvent","data","FormData","console","log","Array","from","entries","Files","useState","files","setFiles","Form","Group","className","controlId","Label","Control","onChange","map","v","name","type","multiple","Text","rel","href","length","CruiseLines","cruise","line","collections","woce_lines","expocode","PIList","roles","Set","participants","filter","participant","has","role","flexsearchOptions","preset","tokenize","document","id","index","CruiseSelector","loaded","setLoaded","cruises","setCrusies","searchResults","setSearchResults","open","setOpen","Document","setIndex","doSearch","query","idx","tokens","split","e","trim","intersection","token","queryIds","search","tokenMatch","result","union","useEffect","a","fetch","response","json","newIndex","forEach","element","add","error","loadCruiseInfo","buttonText","notYet","loadError","Button","onClick","variant","disabled","_cruises","ids","value","includes","Table","ship","country","startDate","endDate","DataTypeSelector","Check","label","App","onSubmit","placeholder","as","rows","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9ff1f144.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport { Form, Button, Table } from \"react-bootstrap\";\nimport { Document, Id, IndexOptionsForDocumentSearch } from \"flexsearch\"\nimport { intersection, union } from 'lodash'\n\ninterface Participant {\n  name: string;\n  email: string;\n  role: string;\n  institution: string;\n}\n\ninterface Collections {\n  groups: string[];\n  oceans: string[];\n  programs: string[];\n  woce_lines: string[];\n}\n\ninterface Cruise {\n  id: number;\n  expocode: string;\n  startDate: string;\n  endDate: string;\n  ship: string;\n  country: string;\n  collections: Collections;\n  participants: Participant[];\n}\n\nconst CCHDO_CRUISE_INFO = \"https://cchdo.ucsd.edu/api/v1/cruise/all\";\n\nconst handleFormSubmit = (event: React.SyntheticEvent) => {\n  event.preventDefault();\n  const target = event.nativeEvent.target as HTMLFormElement;\n  const data = new FormData(target);\n  console.log(Array.from(data.entries()));\n};\n\nconst Files = () => {\n  const [files, setFiles] = useState<string[]>([]);\n  const handleFileSelect = (event: React.SyntheticEvent) => {\n    const target = event.target as HTMLInputElement;\n    if (target.files === null) {\n      return;\n    }\n    setFiles(Array.from(target.files).map((v) => v.name));\n  };\n  return (\n    <Form.Group className=\"mb-3\" controlId=\"submitter_email\">\n      <Form.Label>Select FIles</Form.Label>\n      <Form.Control\n        onChange={handleFileSelect}\n        name=\"file\"\n        type=\"file\"\n        multiple\n      />\n      <Form.Text>\n        You can select multiple files using your system dialog box. (see how:{\" \"}\n        <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://support.apple.com/en-lamr/guide/mac-help/mchlp1378/mac\">\n          mac\n        </a>\n        ,{\" \"}\n        <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://nerdschalk.com/how-to-select-multiple-files-on-windows-10-in-2021-7-ways/\">\n          windows\n        </a>\n        )\n      </Form.Text>\n      {files.length > 1 && (\n        <ul>\n          {files.map((v) => (\n            <li key={v}>{v}</li>\n          ))}\n        </ul>\n      )}\n    </Form.Group>\n  );\n};\n\ntype CruiseSelectorStates = \"notYet\" | \"loadError\" | \"loaded\";\n\nconst CruiseLines = ({ cruise }: { cruise: Cruise }) => {\n  const line = cruise.collections.woce_lines;\n  if (line.length === 0) {\n    return <span></span>\n  }\n  return (<ul>\n    {line.map((line) => <li key={`${cruise.expocode}_${line}`}>{line}</li>)}\n  </ul>)\n}\n\nconst PIList = ({ cruise }: { cruise: Cruise }) => {\n  const roles = new Set([\"Chief Scientist\", \"Co-Chief Scientist\"])\n  let participants = cruise.participants;\n  participants = participants.filter((participant) => roles.has(participant.role))\n  if (participants.length === 0) {\n    return <span></span>\n  }\n  return (<ul>\n    {participants.map((participant) => <li key={`${cruise.expocode}_${participant.name}`}>{participant.name}</li>)}\n  </ul>)\n}\n\nconst flexsearchOptions: IndexOptionsForDocumentSearch<Cruise> = {\n  preset: \"match\",\n  tokenize: \"full\",\n  document: {\n    id: \"id\",\n    index: [\n      \"expocode\",\n      \"participants[]:name\",\n      \"collections:woce_lines\",\n      \"collections:groups\",\n      \"collections:programs\",\n      \"collections:oceans\",\n      \"ship\",\n      \"startDate\",\n      \"endDate\",\n      \"start_port\",\n      \"end_port\",\n      \"references[]:value\"\n    ],\n  }\n}\n\nconst CruiseSelector = () => {\n  const [loaded, setLoaded] = useState<CruiseSelectorStates>(\"notYet\");\n  const [cruises, setCrusies] = useState<Cruise[]>([]);\n  const [searchResults, setSearchResults] = useState<Cruise[]>([]);\n  const [open, setOpen] = useState<boolean>(false)\n  const [index, setIndex] = useState(new Document(flexsearchOptions))\n\n  const doSearch = (query: string, idx: Document<Cruise>): Id[] => {\n    const tokens = query.split(/(\\s+)/).filter(e => e.trim().length > 0)\n    if (tokens.length > 1) {\n      return intersection(...tokens.map(token => doSearch(token, idx)))\n    }\n    const queryResults = idx.search(query)\n    const queryIds = queryResults.map(tokenMatch => tokenMatch.result)\n    return union(...queryIds)\n  }\n\n  const setSearchFilteredCruises = (_cruises: Cruise[], ids: Id[]): void => {\n    setSearchResults(_cruises.filter(cruise => ids.includes(cruise.id)))\n  }\n\n  useEffect(() => {\n    async function loadCruiseInfo() {\n      try {\n        let response = await fetch(CCHDO_CRUISE_INFO);\n        const data: Cruise[] = await response.json();\n        setCrusies(data);\n\n        const newIndex = new Document(flexsearchOptions)\n        data.forEach(element => {\n          newIndex.add(element)\n        });\n        setIndex(newIndex)\n\n        setLoaded(\"loaded\");\n      } catch (err) {\n        console.error(err)\n        setLoaded(\"loadError\");\n      }\n    }\n    loadCruiseInfo();\n  }, []);\n  const buttonText = {\n    notYet: \"Loading cruises...\",\n    loadError: \"Could not load cruise list\",\n    loaded: `Select Cruise: (${cruises.length} cruises)`,\n  };\n\n  return (\n    <div>\n      <Button onClick={() => setOpen(!open)} variant=\"outline-secondary\" disabled={loaded !== \"loaded\"}>\n        {buttonText[loaded]}\n      </Button>\n\n      {open === true && <div><input onChange={(event) => setSearchFilteredCruises(cruises, doSearch(event.target.value, index))} /> <Table><tbody>{searchResults.map(cruise => <tr key={cruise.id}><td>{cruise.expocode}</td><td><CruiseLines cruise={cruise} /></td><td>{cruise.ship}</td><td>{cruise.country}</td><td>{cruise.startDate}</td><td>{cruise.endDate}</td><td><PIList cruise={cruise} /></td></tr>)}</tbody></Table></div>}\n    </div>\n  );\n};\n\nconst DataTypeSelector = () => {\n  return (\n    <div>\n      <Form.Group className=\"mb-3\" controlId=\"submission_notes_private\">\n        <Form.Check\n          id=\"submission_data_type_btl\"\n          name=\"submission_data_type\"\n          value=\"bottle\"\n          type=\"checkbox\"\n          label=\"bottle data\"\n        />\n        <Form.Check\n          id=\"submission_data_type_ctd\"\n          name=\"submission_data_type\"\n          value=\"ctd\"\n          type=\"checkbox\"\n          label=\"CTD data\"\n        />\n        <Form.Check\n          id=\"submission_data_type_raw\"\n          name=\"submission_data_type\"\n          value=\"raw\"\n          type=\"checkbox\"\n          label=\"raw ctd data\"\n        />\n        <Form.Check\n          id=\"submission_data_type_other\"\n          name=\"submission_data_type\"\n          value=\"other\"\n          type=\"checkbox\"\n          label=\"other\"\n        />\n        <Form.Text>select all that apply</Form.Text>\n      </Form.Group>\n    </div>\n  );\n};\n\nfunction App() {\n  return (\n    <div>\n      <h1>CCHDO Submit Page</h1>\n      <h2>Required Information</h2>\n      <Form onSubmit={handleFormSubmit}>\n        <Form.Group className=\"mb-3\" controlId=\"submitter_name\">\n          <Form.Label>Your Name</Form.Label>\n          <Form.Control\n            name=\"submitter_name\"\n            type=\"text\"\n            placeholder=\"Your Name\"\n          />\n        </Form.Group>\n\n        <Form.Group className=\"mb-3\" controlId=\"submitter_email\">\n          <Form.Label>Your Email</Form.Label>\n          <Form.Control\n            name=\"submitter_email\"\n            type=\"email\"\n            placeholder=\"example@example.edu\"\n          />\n        </Form.Group>\n\n        <h2>Files to Upload</h2>\n        <Files />\n\n        <h2>Optional Questions about uploaded data</h2>\n\n        <h3>Associate with a cruise?</h3>\n        <CruiseSelector />\n\n        <h3>Associate with data type?</h3>\n        <DataTypeSelector />\n\n        <h3>Any Notes?</h3>\n        <Form.Group className=\"mb-3\" controlId=\"submission_notes\">\n          <Form.Label>Public Submission Notes</Form.Label>\n          <Form.Control as=\"textarea\" rows={3} />\n          <Form.Text>\n            {\" \"}\n            Anything else users of the data should know? These notes will appear\n            on cruise pages.\n          </Form.Text>\n        </Form.Group>\n\n        <Form.Group className=\"mb-3\" controlId=\"submission_notes_private\">\n          <Form.Label>Private Submission Notes</Form.Label>\n          <Form.Control as=\"textarea\" rows={3} />\n          <Form.Text>\n            Anything else you would like CCHDO staff to know? If data are not\n            intended for public access, please note why here\n          </Form.Text>\n        </Form.Group>\n\n        <hr />\n\n        <Button variant=\"primary\" type=\"submit\">\n          Submit\n        </Button>\n      </Form>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}