{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["CCHDO_CRUISE_INFO","handleFormSubmit","event","preventDefault","target","nativeEvent","data","FormData","console","log","Array","from","entries","Files","useState","files","setFiles","Form","Group","className","controlId","Label","Control","onChange","map","v","name","type","multiple","Text","length","CruiseSelector","loaded","setLoaded","cruises","setCrusies","useEffect","a","fetch","response","json","loadCruiseInfo","buttonText","notYet","loadError","Button","variant","disabled","DataTypeSelector","Check","id","value","label","App","onSubmit","placeholder","as","rows","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.990713c3.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport {Form, Button} from 'react-bootstrap';\n\nconst CCHDO_CRUISE_INFO = \"https://cchdo.ucsd.edu/api/v1/cruise/all\"\n\nconst handleFormSubmit = (event:React.SyntheticEvent) => {\n  event.preventDefault();\n  const target = event.nativeEvent.target as HTMLFormElement\n  const data = new FormData(target);\n  console.log(Array.from(data.entries()))\n}\n\nconst Files = () => {\n  const [files, setFiles] = useState<string[]>([])\n  const handleFileSelect = (event:React.SyntheticEvent) => {\n    const target = event.target as HTMLInputElement\n    if (target.files === null){\n      return\n    }\n    setFiles(Array.from(target.files).map(v => v.name))\n  };\n  return (\n    <Form.Group className=\"mb-3\" controlId=\"submitter_email\">\n      <Form.Label>Select FIles</Form.Label>\n      <Form.Control onChange={handleFileSelect} name=\"file\" type=\"file\" multiple />\n      <Form.Text>You can select multiple files using your system dialog box</Form.Text>\n      {files.length > 1 &&\n        <ul>\n          {files.map(v => <li key={v}>{v}</li>)}\n        </ul>\n      }\n    </Form.Group>\n  )\n}\n\ntype CruiseSelectorStates = \"notYet\" | \"loadError\" | \"loaded\"\n\nconst CruiseSelector = () => {\n  const [loaded, setLoaded] = useState<CruiseSelectorStates>(\"notYet\")\n  const [cruises, setCrusies] = useState([])\n\n  useEffect(() => {\n    async function loadCruiseInfo(){\n      try{\n        let response = await fetch(CCHDO_CRUISE_INFO)\n        let data = await response.json()\n        setCrusies(data)\n        setLoaded(\"loaded\")\n      } catch (err){\n        setLoaded(\"loadError\")\n      }\n    }\n    loadCruiseInfo()\n  }, [])\n  const buttonText = {\n    notYet: \"Loading cruises...\",\n    loadError: \"Could not load cruise list\",\n    loaded: `Select Cruise: (${cruises.length} cruises)`,\n  }\n\n  return <Button variant=\"outline-secondary\" disabled={loaded!==\"loaded\"}>{buttonText[loaded]}</Button>\n}\n\nconst DataTypeSelector = () => {\n  return <div>\n    <Form.Group className=\"mb-3\" controlId=\"submission_notes_private\">\n    <Form.Check id=\"submission_data_type_btl\" name=\"submission_data_type\" value=\"bottle\" type=\"checkbox\" label=\"bottle data\"/>\n    <Form.Check id=\"submission_data_type_ctd\" name=\"submission_data_type\" value=\"ctd\" type=\"checkbox\" label=\"CTD data\"/>\n    <Form.Check id=\"submission_data_type_raw\" name=\"submission_data_type\" value=\"raw\" type=\"checkbox\" label=\"raw ctd data\"/>\n    <Form.Check id=\"submission_data_type_other\" name=\"submission_data_type\" value=\"other\" type=\"checkbox\" label=\"other\"/>\n    <Form.Text>select all that apply</Form.Text>\n    </Form.Group>\n</div>\n}\n\nfunction App() {\n  return (\n    <div>\n    <h1>CCHDO Submit Page</h1>\n    <h2>Required Information</h2>\n    <Form onSubmit={handleFormSubmit}>\n      <Form.Group className=\"mb-3\" controlId=\"submitter_name\">\n        <Form.Label>Your Name</Form.Label>\n        <Form.Control name=\"submitter_name\" type=\"text\" placeholder=\"Your Name\" />\n      </Form.Group>\n\n      <Form.Group className=\"mb-3\" controlId=\"submitter_email\">\n        <Form.Label>Your Email</Form.Label>\n        <Form.Control name=\"submitter_email\" type=\"email\" placeholder=\"example@example.edu\" />\n      </Form.Group>\n\n      <h2>Files to Upload</h2>\n      <Files />\n\n      <h2>Optional Questions about uploaded data</h2>\n\n      <h3>Associate with a cruise?</h3>\n      <CruiseSelector />\n\n      <h3>Associate with data type?</h3>\n      <DataTypeSelector />\n\n      <h3>Any Notes?</h3>\n        <Form.Group className=\"mb-3\" controlId=\"submission_notes\">\n          <Form.Label>Public Submission Notes</Form.Label>\n          <Form.Control as=\"textarea\" rows={3} />\n          <Form.Text> Anything else users of the data should know? These notes will appear on cruise pages.</Form.Text>\n        </Form.Group>\n\n        <Form.Group className=\"mb-3\" controlId=\"submission_notes_private\">\n          <Form.Label>Private Submission Notes</Form.Label>\n          <Form.Control as=\"textarea\" rows={3} />\n          <Form.Text>Anything else you would like CCHDO staff to know? If data are not intended for public access, please note why here</Form.Text>\n        </Form.Group>\n\n      <hr />\n\n      <Button variant=\"primary\" type=\"submit\">\n        Submit\n      </Button>\n    </Form>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}