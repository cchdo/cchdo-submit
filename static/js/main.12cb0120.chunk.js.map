{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["CCHDO_CRUISE_INFO","handleFormSubmit","event","preventDefault","target","nativeEvent","data","FormData","console","log","Array","from","entries","Files","useState","files","setFiles","Form","Group","className","controlId","Label","Control","onChange","map","v","name","type","multiple","Text","rel","href","length","flexsearchOptions","preset","tokenize","document","id","index","CruiseSelector","loaded","setLoaded","cruises","setCrusies","searchResults","setSearchResults","open","setOpen","Document","setIndex","searchQuery","setSearchQuery","selectedCruise","setSelectedCruise","pageFor","setPageFor","doSearch","query","idx","tokens","split","filter","e","trim","intersection","token","queryIds","search","tokenMatch","result","union","selectedCruiseObject","cruise","undefined","useEffect","a","searchPageFor","URLSearchParams","window","location","get","fetch","response","json","sort","b","startDate","newIndex","forEach","element","add","cruiseObjects","expocode","error","loadCruiseInfo","PageForAlertBad","Alert","variant","PageForAlertYay","columns","dataField","isDummyField","text","formatter","_","row","rowIndex","Button","onClick","cell","str","chiSci","obj","role","endDate","ship","value","disabled","notYet","loadError","Collapse","in","Card","Body","Stack","gap","Col","md","placeholder","_cruises","ids","includes","keyField","pagination","paginationFactory","noDataIndication","DataTypeSelector","Check","label","App","Container","onSubmit","as","rows","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.12cb0120.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"react-bootstrap-table2-paginator/dist/react-bootstrap-table2-paginator.min.css\";\n\nimport {\n  Form,\n  Button,\n  Collapse,\n  Card,\n  Stack,\n  Col,\n  Container,\n  Alert,\n} from \"react-bootstrap\";\nimport { Document, Id, IndexOptionsForDocumentSearch } from \"flexsearch\";\nimport { intersection, union } from \"lodash\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\n\ninterface Participant {\n  name: string;\n  email: string;\n  role: string;\n  institution: string;\n}\n\ninterface Collections {\n  groups: string[];\n  oceans: string[];\n  programs: string[];\n  woce_lines: string[];\n}\n\ninterface Cruise {\n  id: number;\n  expocode: string;\n  startDate: string;\n  endDate: string;\n  ship: string;\n  country: string;\n  collections: Collections;\n  participants: Participant[];\n}\n\nconst CCHDO_CRUISE_INFO = \"https://cchdo.ucsd.edu/api/v1/cruise/all\";\n\nconst handleFormSubmit = (event: React.SyntheticEvent) => {\n  event.preventDefault();\n  const target = event.nativeEvent.target as HTMLFormElement;\n  const data = new FormData(target);\n  console.log(Array.from(data.entries()));\n};\n\nconst Files = () => {\n  const [files, setFiles] = useState<string[]>([]);\n  const handleFileSelect = (event: React.SyntheticEvent) => {\n    const target = event.target as HTMLInputElement;\n    if (target.files === null) {\n      return;\n    }\n    setFiles(Array.from(target.files).map((v) => v.name));\n  };\n  return (\n    <Form.Group className=\"mb-3\" controlId=\"submitter_email\">\n      <Form.Label>Select FIles</Form.Label>\n      <Form.Control\n        onChange={handleFileSelect}\n        name=\"file\"\n        type=\"file\"\n        multiple\n      />\n      <Form.Text>\n        You can select multiple files using your system dialog box. (see how:{\" \"}\n        <a\n          rel=\"noopener noreferrer\"\n          target=\"_blank\"\n          href=\"https://support.apple.com/en-lamr/guide/mac-help/mchlp1378/mac\"\n        >\n          mac\n        </a>\n        ,{\" \"}\n        <a\n          rel=\"noopener noreferrer\"\n          target=\"_blank\"\n          href=\"https://nerdschalk.com/how-to-select-multiple-files-on-windows-10-in-2021-7-ways/\"\n        >\n          windows\n        </a>\n        )\n      </Form.Text>\n      {files.length > 1 && (\n        <ul>\n          {files.map((v) => (\n            <li key={v}>{v}</li>\n          ))}\n        </ul>\n      )}\n    </Form.Group>\n  );\n};\n\ntype CruiseSelectorStates = \"notYet\" | \"loadError\" | \"loaded\";\n\nconst flexsearchOptions: IndexOptionsForDocumentSearch<Cruise> = {\n  preset: \"match\",\n  tokenize: \"full\",\n  document: {\n    id: \"id\",\n    index: [\n      \"expocode\",\n      \"participants[]:name\",\n      \"collections:woce_lines\",\n      \"collections:groups\",\n      \"collections:programs\",\n      \"collections:oceans\",\n      \"country\",\n      \"ship\",\n      \"startDate\",\n      \"endDate\",\n      \"start_port\",\n      \"end_port\",\n      \"references[]:value\",\n    ],\n  },\n};\n\nconst CruiseSelector = () => {\n  const [loaded, setLoaded] = useState<CruiseSelectorStates>(\"notYet\");\n  const [cruises, setCrusies] = useState<Cruise[]>([]);\n  const [searchResults, setSearchResults] = useState<Cruise[]>([]);\n  const [open, setOpen] = useState<boolean>(false);\n  const [index, setIndex] = useState(new Document(flexsearchOptions));\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedCruise, setSelectedCruise] = useState<number | undefined>();\n  const [pageFor, setPageFor] = useState<string | null>(null);\n\n  const doSearch = (query: string, idx: Document<Cruise>): Id[] => {\n    const tokens = query.split(/(\\s+)/).filter((e) => e.trim().length > 0);\n    if (tokens.length > 1) {\n      return intersection(...tokens.map((token) => doSearch(token, idx)));\n    }\n    const queryResults = idx.search(query);\n    const queryIds = queryResults.map((tokenMatch) => tokenMatch.result);\n    return union(...queryIds);\n  };\n\n  const setSearchFilteredCruises = (_cruises: Cruise[], ids: Id[]): void => {\n    setSearchResults(_cruises.filter((cruise) => ids.includes(cruise.id)));\n  };\n\n  const selectedCruiseObject: Cruise | undefined = selectedCruise\n    ? cruises.filter((cruise) => cruise.id === selectedCruise)[0]\n    : undefined;\n\n  useEffect(() => {\n    async function loadCruiseInfo() {\n      let searchPageFor = new URLSearchParams(window.location.search).get(\n        \"for\"\n      );\n      setPageFor(searchPageFor);\n\n      try {\n        let response = await fetch(CCHDO_CRUISE_INFO);\n        let data: Cruise[] = await response.json();\n        data = data.sort((a, b) =>\n          a.startDate > b.startDate\n            ? a.startDate === b.startDate\n              ? 0\n              : -1\n            : -0\n        );\n        setCrusies(data);\n\n        const newIndex = new Document(flexsearchOptions);\n        data.forEach((element) => {\n          newIndex.add(element);\n        });\n        setIndex(newIndex);\n\n        if (searchPageFor !== null) {\n          let cruiseObjects = data.filter(\n            (cruise) => cruise.expocode === searchPageFor\n          );\n          if (cruiseObjects.length === 1) {\n            setSelectedCruise(cruiseObjects[0].id);\n          }\n        }\n\n        setLoaded(\"loaded\");\n      } catch (err) {\n        console.error(err);\n        setLoaded(\"loadError\");\n      }\n    }\n    loadCruiseInfo();\n  }, []);\n\n  const PageForAlertBad = (\n    <Alert variant=\"danger\">\n      This was a page for {pageFor}, but no cruise with that Expocode could be\n      found, use the Select Cruise button to select an existing cruise. \n      Or ignore this message to not select a cruise.\n    </Alert>\n  );\n  const PageForAlertYay = (\n    <Alert variant=\"success\">\n      This is a page for {pageFor}, if you didn't want this, use the Select\n      Cruise button to select a different cruise or Clear Cruise to not select \n      anything.\n    </Alert>\n  );\n\n  const buttonText = {\n    notYet: \"Loading cruises...\",\n    loadError: \"Could not load cruise list\",\n    loaded: `Select Cruise`,\n  };\n\n  const listFormatter = (cell: string[], row: any) => {\n    if (cell.length === 0) {\n      return <span>-</span>;\n    }\n    return (\n      <ul>\n        {cell.map((str) => (\n          <li key={str}>{str}</li>\n        ))}\n      </ul>\n    );\n  };\n  const chiSciFormatter = (cell: Participant[], row: any) => {\n    const chiSci = cell.filter((obj) => obj.role === \"Chief Scientist\");\n    if (chiSci.length === 0) {\n      return <span>-</span>;\n    }\n    return (\n      <ul>\n        {chiSci.map((str) => (\n          <li key={str.name}>{str.name}</li>\n        ))}\n      </ul>\n    );\n  };\n\n  const columns = [\n    {\n      dataField: \"df1\",\n      isDummyField: true,\n      text: \"Select\",\n      formatter: (_: any, row: Cruise, rowIndex: number) => {\n        return (\n          <Button\n            onClick={() => {\n              setSelectedCruise(row.id);\n              setOpen(false);\n              setPageFor(null);\n            }}\n          >\n            Select\n          </Button>\n        );\n      },\n    },\n    {\n      dataField: \"expocode\",\n      text: \"Expocode\",\n    },\n    {\n      dataField: \"collections.woce_lines\",\n      text: \"Line\",\n      formatter: listFormatter,\n    },\n    {\n      dataField: \"ship\",\n      text: \"Ship\",\n    },\n    {\n      dataField: \"country\",\n      text: \"Country\",\n    },\n    {\n      dataField: \"startDate\",\n      text: \"Start Date\",\n    },\n    {\n      dataField: \"endDate\",\n      text: \"End Date\",\n    },\n    {\n      dataField: \"participants\",\n      text: \"Chi Sci\",\n      formatter: chiSciFormatter,\n    },\n  ];\n\n  return (\n    <div>\n      {pageFor && loaded === \"loaded\" && !selectedCruise && PageForAlertBad}\n      {pageFor && loaded === \"loaded\" && selectedCruise && PageForAlertYay}\n      <p>\n        Selected Cruise:{\" \"}\n        {selectedCruise\n          ? `${selectedCruiseObject?.expocode} (${selectedCruiseObject?.startDate} to ${selectedCruiseObject?.endDate} on the ${selectedCruiseObject?.ship})`\n          : \"None (this is OK)\"}\n      </p>\n      <input\n        type=\"hidden\"\n        name=\"cruise_id\"\n        id=\"cruise_id\"\n        value={selectedCruise}\n      />\n      <Button\n        onClick={() => setOpen(!open)}\n        variant=\"outline-secondary\"\n        disabled={loaded !== \"loaded\"}\n      >\n        {selectedCruise ? \"Change Cruise\" : buttonText[loaded]}\n      </Button>\n\n      {selectedCruise && (\n        <Button\n          onClick={() => {\n            setSelectedCruise(undefined);\n            setPageFor(null);\n          }}\n          variant=\"outline-secondary\"\n        >\n          Clear Cruise\n        </Button>\n      )}\n\n      <Collapse in={open}>\n        <Card>\n          <Card.Body>\n            <Stack gap={1}>\n              <Col md={4}>\n                <Form.Control\n                  type=\"search\"\n                  placeholder=\"search...\"\n                  value={searchQuery}\n                  onChange={(event) => {\n                    setSearchQuery(event.target.value);\n                    setSearchFilteredCruises(\n                      cruises,\n                      doSearch(event.target.value, index)\n                    );\n                  }}\n                />\n              </Col>\n              <div className=\"table-responsive-lg\">\n                <BootstrapTable\n                  keyField=\"expocode\"\n                  data={searchQuery.trim() === \"\" ? cruises : searchResults}\n                  columns={columns}\n                  pagination={paginationFactory({})}\n                  noDataIndication=\"No Cruises Found\"\n                />\n              </div>\n            </Stack>\n          </Card.Body>\n        </Card>\n      </Collapse>\n    </div>\n  );\n};\n\nconst DataTypeSelector = () => {\n  return (\n    <div>\n      <Form.Group className=\"mb-3\" controlId=\"submission_notes_private\">\n        <Form.Check\n          id=\"submission_data_type_btl\"\n          name=\"submission_data_type\"\n          value=\"bottle\"\n          type=\"checkbox\"\n          label=\"bottle data\"\n        />\n        <Form.Check\n          id=\"submission_data_type_ctd\"\n          name=\"submission_data_type\"\n          value=\"ctd\"\n          type=\"checkbox\"\n          label=\"CTD data\"\n        />\n        <Form.Check\n          id=\"submission_data_type_raw\"\n          name=\"submission_data_type\"\n          value=\"raw\"\n          type=\"checkbox\"\n          label=\"raw ctd data\"\n        />\n        <Form.Check\n          id=\"submission_data_type_other\"\n          name=\"submission_data_type\"\n          value=\"other\"\n          type=\"checkbox\"\n          label=\"other\"\n        />\n        <Form.Text>select all that apply</Form.Text>\n      </Form.Group>\n    </div>\n  );\n};\n\nfunction App() {\n  return (\n    <Container>\n      <h1>CCHDO Submit Page</h1>\n      <h2>Required Information</h2>\n      <Form onSubmit={handleFormSubmit}>\n        <Form.Group className=\"mb-3\" controlId=\"submitter_name\">\n          <Form.Label>Your Name</Form.Label>\n          <Form.Control\n            name=\"submitter_name\"\n            type=\"text\"\n            placeholder=\"Your Name\"\n          />\n        </Form.Group>\n\n        <Form.Group className=\"mb-3\" controlId=\"submitter_email\">\n          <Form.Label>Your Email</Form.Label>\n          <Form.Control\n            name=\"submitter_email\"\n            type=\"email\"\n            placeholder=\"example@example.edu\"\n          />\n        </Form.Group>\n\n        <h2>Files to Upload</h2>\n        <Files />\n\n        <h2>Optional Questions about uploaded data</h2>\n\n        <h3>Associate with a cruise?</h3>\n        <CruiseSelector />\n\n        <h3>Associate with data type?</h3>\n        <DataTypeSelector />\n\n        <h3>Any Notes?</h3>\n        <Form.Group className=\"mb-3\" controlId=\"submission_notes\">\n          <Form.Label>Public Submission Notes</Form.Label>\n          <Form.Control as=\"textarea\" rows={3} />\n          <Form.Text>\n            {\" \"}\n            Anything else users of the data should know? These notes will appear\n            on cruise pages.\n          </Form.Text>\n        </Form.Group>\n\n        <Form.Group className=\"mb-3\" controlId=\"submission_notes_private\">\n          <Form.Label>Private Submission Notes</Form.Label>\n          <Form.Control as=\"textarea\" rows={3} />\n          <Form.Text>\n            Anything else you would like CCHDO staff to know? If data are not\n            intended for public access, please note why here\n          </Form.Text>\n        </Form.Group>\n\n        <hr />\n\n        <Button variant=\"primary\" type=\"submit\">\n          Submit\n        </Button>\n      </Form>\n    </Container>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}